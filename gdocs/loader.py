from .doc import Doc

class Loader:
    '''
    Class to load Google Docs. In order to use it gdoc must be installed with [oauth2] extras.
    '''
    DEFAULT_SCOPES = ['https://www.googleapis.com/auth/documents.readonly']

    def __init__(self, credentials:dict, token_credentials:dict=None, scopes:list=None, on_new_token:callable=None):
        '''
        :param credentials dict: Credentials object generated by Google.
        :param token_credentials dict: Token credentials object generated by OAuth2 flow. Optional.
        :param scopes List[str]: Scopes to be used in OAuth2. If omitted Loader.DEFAULT_SCOPES is used.
        :param on_new_token callable: Callback to handle new token credentials. Optional.
        '''
        from google.oauth2.credentials import Credentials

        self.credentials = credentials
        if token_credentials:
            self.token_credentials = Credentials('')
            self.token_credentials.__setstate__(token_credentials)
        else:
            self.token_credentials = None
        self.scopes = scopes or self.DEFAULT_SCOPES
        self.service = None
        self.on_new_token = on_new_token


    @classmethod
    def from_json_files(cls, credentials_path:str, token_credentials_path:str=None, scopes:list=None):
        '''
        Creates a new Loader instance with file based credentials management.
        :param credentials_path str: Path to JSON file with Google client id credentials.
        :param token_credentials_path str: Path to store token credentials generated by Google OAuth. Optional.
        :param scopes List[str]: Scopes to be used in OAuth2. If omitted Loader.DEFAULT_SCOPES is used.
        '''
        import json
        import os
        from datetime import datetime

        token_credentials = None
        callback = None

        def _on_new_token(data):
            if 'expiry' in data:
                data['expiry'] = data['expiry'].isoformat()
            with open(token_credentials_path, 'w') as f:
                json.dump(data, f)

        with open(credentials_path) as f:
            credentials = json.load(f)

        if token_credentials_path:
            if os.path.exists(token_credentials_path):
                with open(token_credentials_path) as f:
                    token_credentials = json.load(f)
                    if 'expiry' in token_credentials:
                        token_credentials['expiry'] = datetime.fromisoformat(token_credentials['expiry'])
            callback = _on_new_token

        return cls(credentials, token_credentials, scopes, callback)


    def _build_service(self):
        from copy import deepcopy
        from google.auth.transport.requests import Request
        from google_auth_oauthlib.flow import InstalledAppFlow
        from googleapiclient.discovery import build

        if not self.token_credentials or not self.token_credentials.valid:
            if self.token_credentials and self.token_credentials.expired and self.token_credentials.refresh_token:
                self.token_credentials.refresh(Request())
            else:
                flow = InstalledAppFlow.from_client_config(self.credentials, scopes=self.scopes)
                self.token_credentials = flow.run_local_server(port=0)
                print(self.token_credentials.__dict__)
                if self.on_new_token and callable(self.on_new_token):
                    self.on_new_token(deepcopy(self.token_credentials.__dict__))
        self.service = build('docs', 'v1', credentials=self.token_credentials)


    def get_doc(self, doc_id:str):
        if not self.service:
            self._build_service()
        raw_doc = self.service.documents().get(documentId=doc_id).execute()
        return Doc(raw_doc)
